---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  peco-backend
Transform:
  - AWS::Serverless-2016-10-31

Metadata:
  EsbuildProperties: &esbuild_props
    External:
      - "@aws-sdk/client-api-gateway"
      - "@aws-sdk/client-cognito-identity-provider"
      - "@aws-sdk/client-dynamodb"
      - "@aws-sdk/lib-dynamodb"
      - uuid
      - http-status-codes
      - uuid-apikey
    Minify: false
    Target: es2020
    Sourcemap: false

Globals:
  Function:
    Architectures:
      - arm64
    Layers:
      - !Ref CommonLambdaDependenciesLayer
    Runtime: nodejs20.x

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: peco-cognito-user-pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        UnusedAccountValidityDays: 365
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      Schema:
        - AttributeDataType: String
          Name: orgId
          Mutable: true
        - AttributeDataType: String
          Name: apiKey
          Mutable: true
      LambdaConfig:
        PostConfirmation: !GetAtt CognitoAutomaticOrgIdAssignmentFunction.Arn
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
  CognitoAutomaticOrgIdAssignmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/cognito-post-confirmation.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminUpdateUserAttributes
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
            - Effect: Allow
              Action:
                - apigateway:POST
              Resource: !Sub arn:aws:apigateway:${AWS::Region}::/apikeys
            - Effect: Allow
              Action:
                - apigateway:GET
              Resource: !Sub arn:aws:apigateway:${AWS::Region}::/usageplans
            - Effect: Allow
              Action:
                - apigateway:POST
              Resource: !Sub arn:aws:apigateway:${AWS::Region}::/usageplans/*/keys
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/cognito-post-confirmation.ts
  CognitoLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoAutomaticOrgIdAssignmentFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

  # TODO delete this user pool when testing from CLI is not required anymore
  CliUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      OpenApiVersion: 3.0.3
      ApiKeySourceType: HEADER
      Auth:
        AddApiKeyRequiredToCorsPreflight: true
        AddDefaultAuthorizerToCorsPreflight: true
        ApiKeyRequired: true
        Authorizers:
          RestApiAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
        DefaultAuthorizer: RestApiAuthorizer
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: Default usage plan
          Description: Default usage plan with limited quota
          Quota:
            Limit: 1000
            Period: MONTH
          Throttle:
            BurstLimit: 10
            RateLimit: 1
      Models:
        tag:
          type: object
          additionalProperties: false
          required:
            - name
            - value
          properties:
            name:
              type: string
            value:
              type: string
        usecase:
          type: object
          additionalProperties: false
          required:
            - name
            - description
            - tags
          properties:
            id:
              type: string
            name:
              type: string
            description:
              type: string
            tags:
              type: array
              maxItems: 10
              items:
                $ref: tag
        environment:
          type: object
          additionalProperties: false
          required:
            - name
            - description
            - tags
          properties:
            id:
              type: string
            name:
              type: string
            description:
              type: string
            tags:
              type: array
              maxItems: 10
              items:
                $ref: tag
        product:
          type: object
          additionalProperties: false
          required:
            - name
            - description
            - tags
          properties:
            id:
              type: string
            name:
              type: string
            description:
              type: string
            tags:
              type: array
              maxItems: 10
              items:
                $ref: tag
        metricdefinition:
          type: object
          additionalProperties: false
          required:
            - name
            - description
            - tags
          properties:
            id:
              type: string
            name:
              type: string
            description:
              type: string
            unit:
              type: string
              enum: ["percent", "bytes/s", "milliseconds", "bytes", "ops/s", "none"]
            regressionDirection:
              type: string
              enum: ["up", "down"]
            tags:
              type: array
              maxItems: 10
              items:
                $ref: tag

  CommonLambdaDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: peco-common-lambda-dependencies-layer
      ContentUri: lib/.
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Delete

  GetAllUseCasesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/use-case-crud.handleGetAllRequest
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UseCaseTable
      Environment:
        Variables:
          USE_CASE_TABLE_NAME: !Ref UseCaseTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /use-cases/
            Method: GET
            RestApiId: !Ref RestApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/use-case-crud.ts
  GetUseCaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/use-case-crud.handleGetRequest
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UseCaseTable
      Environment:
        Variables:
          USE_CASE_TABLE_NAME: !Ref UseCaseTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /use-cases/{id}
            Method: GET
            RestApiId: !Ref RestApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/use-case-crud.ts
  PostUseCaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/use-case-crud.handlePostRequest
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref UseCaseTable
      Environment:
        Variables:
          USE_CASE_TABLE_NAME: !Ref UseCaseTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /use-cases/
            Method: POST
            RestApiId: !Ref RestApi
            RequestModel:
              Model: usecase
              Required: true
              ValidateBody: true
              ValidateParameters: false
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/use-case-crud.ts
  PutUseCaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/use-case-crud.handlePutRequest
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref UseCaseTable
      Environment:
        Variables:
          USE_CASE_TABLE_NAME: !Ref UseCaseTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /use-cases/{id}
            Method: PUT
            RestApiId: !Ref RestApi
            RequestModel:
              Model: usecase
              Required: true
              ValidateBody: true
              ValidateParameters: false
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/use-case-crud.ts
  DeleteUseCaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/use-case-crud.handleDeleteRequest
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UseCaseTable
      Environment:
        Variables:
          USE_CASE_TABLE_NAME: !Ref UseCaseTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /use-cases/{id}
            Method: DELETE
            RestApiId: !Ref RestApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/use-case-crud.ts

  GetAllEnvironmensFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/environment-crud.handleGetAllRequest
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EnvironmentTable
      Environment:
        Variables:
          ENVIRONMENT_TABLE_NAME: !Ref EnvironmentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /environments/
            Method: GET
            RestApiId: !Ref RestApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/environment-crud.ts
  GetEnvironmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/environment-crud.handleGetRequest
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EnvironmentTable
      Environment:
        Variables:
          ENVIRONMENT_TABLE_NAME: !Ref EnvironmentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /environments/{id}
            Method: GET
            RestApiId: !Ref RestApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/environment-crud.ts
  PostEnvironmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/environment-crud.handlePostRequest
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref EnvironmentTable
      Environment:
        Variables:
          ENVIRONMENT_TABLE_NAME: !Ref EnvironmentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /environments/
            Method: POST
            RestApiId: !Ref RestApi
            RequestModel:
              Model: environment
              Required: true
              ValidateBody: true
              ValidateParameters: false
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/environment-crud.ts
  PutEnvironmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/environment-crud.handlePutRequest
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref EnvironmentTable
      Environment:
        Variables:
          ENVIRONMENT_TABLE_NAME: !Ref EnvironmentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /environments/{id}
            Method: PUT
            RestApiId: !Ref RestApi
            RequestModel:
              Model: environment
              Required: true
              ValidateBody: true
              ValidateParameters: false
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/environment-crud.ts
  DeleteEnvironmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/environment-crud.handleDeleteRequest
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EnvironmentTable
      Environment:
        Variables:
          ENVIRONMENT_TABLE_NAME: !Ref EnvironmentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /environments/{id}
            Method: DELETE
            RestApiId: !Ref RestApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/environment-crud.ts

  GetAllProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/product-crud.handleGetAllRequest
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ProductTable
      Environment:
        Variables:
          PRODUCT_TABLE_NAME: !Ref ProductTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /products/
            Method: GET
            RestApiId: !Ref RestApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/product-crud.ts
  GetProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/product-crud.handleGetRequest
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ProductTable
      Environment:
        Variables:
          PRODUCT_TABLE_NAME: !Ref ProductTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /products/{id}
            Method: GET
            RestApiId: !Ref RestApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/product-crud.ts
  PostProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/product-crud.handlePostRequest
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref ProductTable
      Environment:
        Variables:
          PRODUCT_TABLE_NAME: !Ref ProductTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /products/
            Method: POST
            RestApiId: !Ref RestApi
            RequestModel:
              Model: product
              Required: true
              ValidateBody: true
              ValidateParameters: false
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/product-crud.ts
  PutProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/product-crud.handlePutRequest
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref ProductTable
      Environment:
        Variables:
          PRODUCT_TABLE_NAME: !Ref ProductTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /products/{id}
            Method: PUT
            RestApiId: !Ref RestApi
            RequestModel:
              Model: product
              Required: true
              ValidateBody: true
              ValidateParameters: false
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/product-crud.ts
  DeleteProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/product-crud.handleDeleteRequest
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductTable
      Environment:
        Variables:
          PRODUCT_TABLE_NAME: !Ref ProductTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /products/{id}
            Method: DELETE
            RestApiId: !Ref RestApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/product-crud.ts

  GetAllMetricDefinitionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/metric-definition-crud.handleGetAllRequest
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MetricDefinitionTable
      Environment:
        Variables:
          METRIC_DEFINITION_TABLE_NAME: !Ref MetricDefinitionTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /metric-definitions/
            Method: GET
            RestApiId: !Ref RestApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/metric-definition-crud.ts
  GetMetricDefinitionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/metric-definition-crud.handleGetRequest
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MetricDefinitionTable
      Environment:
        Variables:
          METRIC_DEFINITION_TABLE_NAME: !Ref MetricDefinitionTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /metric-definitions/{id}
            Method: GET
            RestApiId: !Ref RestApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/metric-definition-crud.ts
  PostMetricDefinitionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/metric-definition-crud.handlePostRequest
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref MetricDefinitionTable
      Environment:
        Variables:
          METRIC_DEFINITION_TABLE_NAME: !Ref MetricDefinitionTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /metric-definitions/
            Method: POST
            RestApiId: !Ref RestApi
            RequestModel:
              Model: metricdefinition
              Required: true
              ValidateBody: true
              ValidateParameters: false
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/metric-definition-crud.ts
  PutMetricDefinitionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/metric-definition-crud.handlePutRequest
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref MetricDefinitionTable
      Environment:
        Variables:
          METRIC_DEFINITION_TABLE_NAME: !Ref MetricDefinitionTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /metric-definitions/{id}
            Method: PUT
            RestApiId: !Ref RestApi
            RequestModel:
              Model: metricdefinition
              Required: true
              ValidateBody: true
              ValidateParameters: false
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/metric-definition-crud.ts
  DeleteMetricDefinitionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/metric-definition-crud.handleDeleteRequest
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MetricDefinitionTable
      Environment:
        Variables:
          METRIC_DEFINITION_TABLE_NAME: !Ref MetricDefinitionTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /metric-definitions/{id}
            Method: DELETE
            RestApiId: !Ref RestApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild_props
        EntryPoints:
          - src/handlers/metric-definition-crud.ts

  UseCaseTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UseCases
      AttributeDefinitions:
        - AttributeName: orgId
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: orgId
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  EnvironmentTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Environments
      AttributeDefinitions:
        - AttributeName: orgId
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: orgId
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  ProductTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Products
      AttributeDefinitions:
        - AttributeName: orgId
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: orgId
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  MetricDefinitionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MetricDefinitions
      AttributeDefinitions:
        - AttributeName: orgId
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: orgId
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: Peco
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: true

Outputs:
  BaseUrlExport:
    Value: !Sub "export BASE_URL=https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  UserPoolIdExport:
    Value: !Sub "export USER_POOL_ID=${CognitoUserPool}"
  UserPoolClientIdExport:
    Value: !Sub "export CLIENT_ID=${CliUserPoolClient}"
  PostConfirmationLambdaNameExport:
    Value: !Sub "export POST_CONFIRMATION_LAMBDA_NAME=${CognitoAutomaticOrgIdAssignmentFunction}"
